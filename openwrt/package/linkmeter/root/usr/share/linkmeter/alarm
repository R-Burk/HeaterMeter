#!/bin/sh

al_set() {
  local AL="LMST,al,"
  local PREMAIN=$al_probe
  local VAL=$1

  while [ $PREMAIN -gt 0 ] ; do
    AL="${AL},,"
    PREMAIN=$((PREMAIN-1))
  done
    
  [ "$al_type" == "H" ] && AL="${AL},"
  lmclient ${AL}${1}
}

# The entire script is a function, to allow redirection to logger
do_alarms() {
cd `dirname $0`
for SCR in "alarm-all" "alarm-${al_probe}${al_type}" ; do
  if [ -x "$SCR" ] ; then
    . ./$SCR 2>&1
    [ $? -ne 0 ] && exit $?
  fi
done

. /lib/functions.sh
config_load linkmeter

# Auto-silence/disable
config_get doit alarms ra${al_type}${al_probe} 0
if [ "$doit" -eq 1 ] ; then
  echo -n "Auto-silencing alarm... "
  al_set 0
fi
if [ "$doit" -eq 2 ] ; then
  echo -n "Auto-disabling alarm... "
  al_set -$al_thresh
fi

# Setpoint change
config_get doit alarms sp${al_type}${al_probe} 0
if [ "$doit" -gt 0 ] ; then
  echo -n "Changing setpoint to $doit... "
  lmclient LMST,sp,$doit
fi

# Send Email
config_get_bool doit alarms email${al_type}${al_probe} 0
config_get dest alarms_email toaddress
if [ "$doit" -gt 0 -a -n "$dest" ] ; then
  config_get dname alarms_email toname
  config_get subject alarms_email subject "HeaterMeter Alert"
  config_get fname alarms_email fromname "HeaterMeter"
  faddr=`grep -i "^from " /etc/msmtprc | cut -d" " -f2`
  [ -z "$faddr" ] && faddr="heatermeter@$ip"

  dname="${dname:+$dname <}$dest${dname:+>}"
  subject=$(eval echo "$subject")
  fname=$(eval echo "$fname \<$faddr\>")
  echo "Sending email from $fname to $dname"

  # Build the message
cat > /tmp/alert << EOF
From: $fname
To: $dname
Subject: $subject
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit

EOF

  while read -r X; do
    eval echo "$X"
  done < email.txt >> /tmp/alert

  sendmail $dest < /tmp/alert
  rm /tmp/alert
fi

# Send SMS
config_get_bool doit alarms sms${al_type}${al_probe} 0
config_get dest alarms_sms toaddress ""
if [ "$doit" -gt 0 -a -n "$dest" ] ; then
  config_get msg alarms_sms message "HeaterMeter Alert"
  msg=$(eval echo "$msg")
  echo "Sending SMS to $dest"

  echo $msg | sendmail $dest
fi

# Send Push Notification
config_get_bool doit alarms push${al_type}${al_probe} 0
config_get pushprovider alarms_push provider ""
if [ "$doit" -gt 0 -a -n "$pushprovider" ] ; then
  case "$pushprovider" in
    "pushbullet")
      config_get key alarms_push pushbulletkey ""
      if [ -n "$key" ] ; then
        echo "Sending pushbullet notification"
        config_get title alarms pushbullettitle ""
        config_get msg alarms_push message ""
        title=$(eval echo "$title")
        msg=$(eval echo "$msg")

        PB_MSG="{\"type\": \"note\", \"title\": \"$title\", \"body\": \"$msg\"}"

        res=$(curl -k -s -H "Content-Type: application/json" -w " %{http_code}" -u "$key": -d "$PB_MSG" https://api.pushbullet.com/v2/pushes)
        rescode=$(echo $res | awk '{print $NF}')
        if [ "$rescode" == "200" ]; then
          echo "Pushbullet notification successfully sent."
        else
          echo "Pushbullet notification failed: $res"
        fi
      else
        echo "Pushbullet notification failed. Missing Pushbullet key"
      fi
    ;;
    "pushover")
      config_get user alarms_push pushoveruser ""
      config_get token alarms_push pushovertoken ""
      config_get sound alarms_push pushoversound "pushover"
      if [ -n "$user" -a -n "$token" ] ; then
        echo "Sending Pushover notification"
        config_get msg alarms_push message ""
        msg=$(eval echo "$msg")
        res=$(curl -k -s -w " %{http_code}" --form-string "token=$token" --form-string "user=$user" --form-string "sound=$sound" --form-string "message=$msg" https://api.pushover.net/1/messages.json)
        rescode=$(echo $res | awk '{print $NF}')
        if [ "$rescode" == "200" ]; then
          echo "Pushover notification successfully sent."
        else
          echo "Pushover notification failed: $res"
        fi
      else
        echo "Pushover notification failed. Missing Pushover user or token key"
      fi
    ;;
    *)
      echo "Failed to send push notification. Please notify developer."
    ;;
  esac

fi

} # end of the do_alarms function

do_alarms 2>&1 | logger -t lmalarm
